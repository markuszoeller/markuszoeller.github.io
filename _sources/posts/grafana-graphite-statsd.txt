

.. post::
   :tags: data-visualization, how-to
   :title: Setup Grafana + Graphite + statsd


=================================
Setup Grafana + Graphite + statsd
=================================

.. todo:: add a useful abstract

* no details about statsd, graphite or grafana
* get things running fast without fakes and mocks
* be "build my dashboard" ready in 15 minutes

.. contents::
    :local:
    :backlinks: top

Environment
===========

.. todo:: specify that a little

* only Ubuntu 14.04 because of *synthesize*
* virtual machine hosted by digital ocean
* only PoC, not productive

Step-by-Step
============

.. highlight:: bash

A few Prerequisites
-------------------

change the timezone to UTC-0, everything else is confusing::

    $ dpkg-reconfigure tzdata

We need git to clone the helper scripts::

    $ apt-get install -y git

Setup statsd and graphite
-------------------------

*Synthesize* [1]_ installs statsd and graphite for us::

    $ mkdir /opt/synthesize
    $ cd /opt/synthesize
    $ git clone https://github.com/obfuscurity/synthesize
    $ cd /opt/synthesize/synthesize
    $ ./install

Setup Grafana
-------------

Install ``grafana`` from package [2]_ (it's not in the official repos)::

    $ wget https://grafanarel.s3.amazonaws.com/builds/grafana_2.6.0_amd64.deb
    $ apt-get install -y adduser libfontconfig
    $ dpkg -i grafana_2.6.0_amd64.deb

Allow anonymous access with *viewer* rights [3]_. Users which are *not* logged
in can create dashboards but cannot save them.::

    $ vim /etc/grafana/grafana.ini

.. code-block:: ini

    [auth.anonymous]
    enabled = true
    org_role = viewer

Everything is set up, start the engines::

    $ service grafana-server start

Open the grafana dashboard with your browser and use port ``3000`` in the URL.
That's the admin URL which is necessary to save your created dashboards.

.. image:: ../images/grafana_datasource.jpg
   :alt: The statsd gauges displayed in graphite
   :target: ../../_images/grafana_datasource.jpg

The Grafana dashboard is intuitive and you can build graphs easily.
There are already some metrics about the host machine.

.. todo:: show an example query in Grafana here to give a hint

You can also access the web UI of the underlying *graphite* at
port ``80``. The hierarchy of the metrics is shown there in a nice
way.

Collect and push custom metrics
-------------------------------

If you want to push your own metrics, below is an example.
It queries information about *OpenStack Nova* bugs from Launchpad and
pushes it to *statsd*. It's a simplified version of a PoC I made
which I intend to make part of http://grafana.openstack.org/.
The key parts of the code are highlighted.

Install these prerequisites before we go to the script::

    $ pip install launchpadlib
    $ pip install python-statsd

Create the folder for the statsd script::

    $ mkdir /opt/lp_stats
    $ cd /opt/lp_stats

.. todo:: double-check if this code works

Get the script ``bug_stats.py`` which creates the statsd data

.. literalinclude:: /code_examples/bug_stats.py
   :language: python
   :emphasize-lines: 6,60,62
   :linenos:

This script will create this hierarchy in *graphite*:

.. image:: /images/graphite_gauges.jpg
   :alt: The statsd gauges displayed in graphite
   :target: /_images/graphite_gauges.jpg

The leaves of this tree will be filled with the values we provide attached
to a timestamp *statsd* will get from the host. That's why setting the
timezone from the beginning is important. Running this script multiple times
will create the time series data we want to visualize with *Grafana*.

Run ``bug_stats.py`` in an interval of 5 minutes as ``nohup`` to avoid
interruption when the SSH session terminates::

    $ nohup watch -n 300 python bug_stats.py &


Build a templated graph in Grafana
----------------------------------

As we get the stats from 4 different projects but want to reuse the same
graph, we will template it with the project name.

At first we need to connect Grafana to the datasource *graphite*

.. image:: ../images/grafana_datasource.jpg
   :alt: TODO
   :target: ../../_images/grafana_datasource.jpg

After that we can create a variable so that we can switch between the four
different projects.

.. image:: ../images/grafana_templating.jpg
   :alt: TODO
   :target: ../../_images/grafana_templating.jpg

Now we can build a graph which makes use of that variable

.. image:: ../images/grafana_templated_query.jpg
   :alt: TODO
   :target: ../../_images/grafana_templated_query.jpg

Save the dashboard and switch between the projects to see the different
collected data. The data we've chosen in this post makes more sense in seeing
long term trends or the impact of *bug smash days*, *bug fix review days* and
so on.

Conclusion
==========

Provided with the steps above you should get a running playground in around
15 minutes. All the pieces work together without any fakes or mocks. Playing
around with your custom time series data and its visualization with *Grafana*
for PoCs should now be easier.

References
==========

.. [1] https://github.com/obfuscurity/synthesize/
.. [2] http://docs.grafana.org/installation/debian/
.. [3] http://docs.grafana.org/installation/configuration/

